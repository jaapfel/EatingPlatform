<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_03_stand_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Attributes
/* vsp and hsp is the vertical horizontal speed at which the player is moving at */
vsp = 0;
hsp = 0;

/* grav is gravity */
grav = 1;

/* grounded determines whether the player is on the ground or is in the air */
grounded = 0;

/* doubleJump is used to determine if the player has already made a double jump in the air or not */
doubleJump =0;

/* These flip variables make sure when the character changes direction, its image flips about it's origin */
imageScale = 1;
flipRight = 0;
flipLeft =1;

/* This variable determines the weight of character */
weightNumber = 3;

/* The following variable determines the speed of the player as he walks and the height factor at which he is able to jump */
walkSpeed = 1;
jumpHeight = 1;

/* The following variable determines if the player is in quicksand */
quicksand = 0;

/* The following variable determines the speed at which the player sinks in quicksand */
sinkSpeed = 1;

/* The following variable dertermines if the character is stuck at a wall */
wallLeft = false;
wallRight = false;

/* The following variable keeps track of the timer */
seconds = 0;
minutes = 0;

/* The following variable determines the stars per level */
//moved to intro obj

/*Pause*/
paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Get our inputs
Key_Left = keyboard_check_direct(vk_left);
Key_Right = keyboard_check_direct(vk_right);
Key_Jump = keyboard_check_pressed(vk_space);

if(!paused)
{
    facing = 0;
    //Move left
    if(Key_Left)
    {
        if !place_meeting(x - 5, y, obj_ground) //this fixes hori collision
        {
        if(wallLeft == false)
        {
            hsp = (-4+quicksand)*walkSpeed;
            //fix image offset when flipped
            if(flipLeft)
            {
                image_xscale = -(imageScale);
                x +=250;
                flipLeft = 0;
                flipRight = 1;
                facing = 0;
            }
            else
            {
                image_xscale = -(imageScale);
            }
        }
        }
    }
    
    //Move right
    if(Key_Right)
    {
        if !place_meeting(x + 5, y, obj_ground) //this fixes hori collision
        {
        if(wallRight == false)
        {
            hsp = (4-quicksand)*walkSpeed;
            //fix image offset when flipped
            if(flipRight)
            {
                image_xscale = imageScale;
                x -= 250;
                flipRight = 0;
                flipLeft = 1;
                facing = 1;
            }
            else
            {
                image_xscale = imageScale;
            }
        }
        }
    }
    
    //Neutral input = 0 movement
    if((Key_Right &amp;&amp; Key_Left) or (!Key_Right &amp;&amp; !Key_Left))
    {
        hsp = 0;
    }
    
    //Jumping
    if(Key_Jump)
    {
        if(grounded) 
        {
            if !place_meeting(x - 5, y, obj_ground)
            {
                hsp = 5;
            }
            vsp = -12*jumpHeight;
        }
        //Double Jump
        else
            if(doubleJump)
            {
                switch(weightNumber)
                {
                    case 1:   grav=0.1; vsp=0; break;
                    case 2:   x += 50*sign(hsp); break;    //Note: Probably needs additional collision detection code
                    case 3:   vsp = -15*jumpHeight; break;
                    case 4:   grav=4; break;
                    default:  vsp = -10*jumpHeight; break;
                }
                doubleJump = 0;
            }
    }
    
    if place_meeting(x,y,obj_ground)
    {
        vsp =-1;
        if place_meeting(x + 5, y, obj_ground)
        hsp = -1;
        else
        hsp = 1;
    }
            
    
    
    //Commit to movement
    x += hsp;
    y += vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Detection
if(!paused)
{    
    vsp += grav;
    //Vertical Collision with regular terrain
    if place_meeting(x, y+vsp,obj_ground)
    {
        while(!place_meeting(x, y+1, obj_ground)) y+=1;
        vsp = 0;
        grounded = 1;
        doubleJump = 1;
    }
    
    //Vertical Collision with SpringBoard terrain
    else if place_meeting(x, y+vsp, terrain_SpringBoard)
    {
        while(!place_meeting(x, y+1, terrain_SpringBoard)) y+=1;
        vsp = -18*jumpHeight;
        grounded = 1;
        doubleJump = 1;
        quicksand = 0;
    }
    
    //Vertical Collision with Quicksand terrain
    else if place_meeting(x, y+vsp, terrain_Quicksand)
    {
        while(!place_meeting(x, y+1, terrain_Quicksand)) y+=1;
        vsp = 0.7*sinkSpeed;
        grounded = 1;
        doubleJump = 1;
        quicksand = 2;
    }
    //NEED TO FIX
    //Vertical Collision with Ice terrain
    else if place_meeting(x, y+vsp, terrain_Ice)
    {
        while(!place_meeting(x, y+1, terrain_Ice)) y+=1;
        vsp = 0;
        grounded = 1;
        doubleJump = 1;
        quicksand = 0;    
    }
    
    //Vertical Collision with Ice break 1 terrain
    else if place_meeting(x, y+vsp, terrain_Ice_break_1)
    {
        while(!place_meeting(x, y+1, terrain_Ice_break_1)) y+=1;
        vsp = 0;
        grounded = 1;
        doubleJump = 1;
        quicksand = 0;
    }
    
    //Vertical Collision with Ice break 2 terrain
    else if place_meeting(x, y+vsp, terrain_Ice_break_2)
    {
        while(!place_meeting(x, y+1, terrain_Ice_break_2)) y+=1;
        vsp = 0;
        grounded = 1;
        doubleJump = 1;
        quicksand = 0;
    }
    else
    {
        grounded = 0;
    }
    
    //Horizontal Collision Left Ground
    if place_meeting(x-1, y, obj_ground)
    {
    //    while(!place_meeting(x+sign(hsp), y, obj_ground)) x += sign(hsp);
        hsp = 0;
        wallLeft = true;
    }
    if not place_meeting(x-1, y, obj_ground)
    {
        wallLeft = false;
    } 
    
    //Horizontal Collision Right Ground
    if place_meeting(x+1, y, obj_ground)
    {
    //    while(!place_meeting(x+sign(hsp), y, obj_ground)) x += sign(hsp);
        hsp = 0;
        wallRight = true;
    }
    if not place_meeting(x+1, y, obj_ground)
    {
        wallRight = false;
    } 
    
    //Horizontal Collision Left SpringBoard
    if place_meeting(x-1, y, terrain_SpringBoard)
    {
    //    while(!place_meeting(x+sign(hsp), y, terrain_SpringBoard)) x += sign(hsp);
        hsp = 0;
        wallLeft = true;
    }
    if not place_meeting(x-1, y, terrain_SpringBoard)
    {
        wallLeft = false;
    } 
    
    //Horizontal Collision Right SpringBoard
    if place_meeting(x+1, y, terrain_SpringBoard)
    {
    //    while(!place_meeting(x+sign(hsp), y, terrain_SpringBoard)) x += sign(hsp);
        hsp = 0;
        wallRight = true;
    }
    if not place_meeting(x+33, y, terrain_SpringBoard)
    {
        wallRight = false;
    } 
    
    //Resets gravity upon touching the ground, so that it can be cut in half to float the player then turn back to 0
    if(grounded) grav=1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weight FSM and Attributes
///////////// WEIGHT FACTOR //////////////
if(!paused)
{
    if(weightNumber == 1)
    {
        walkSpeed = 1.5;
        jumpHeight = 1.75;
        sinkSpeed = 0.70
    }
    else if(weightNumber == 2)
    {
        walkSpeed = 1.25;
        jumpHeight = 1.25;
        sinkSpeed = 0.85
    }
    else if(weightNumber == 3)
    {
        walkSpeed = 1;
        jumpHeight = 1;
        sinkSpeed = 1;
    }
    else if(weightNumber == 4)
    {
        walkSpeed = 0.85;
        jumpHeight = 0.85;
        sinkSpeed = 1.25
    }
    else
    {
        walkSpeed = 0.70;
        jumpHeight = 0.70;
        sinkSpeed = 1.5
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
/////////////  Animation Code  /////////////
if(!paused)
{
    // Idle Animation
    if(vsp == 0)
    {
        if(hsp == 0)
        {
            if(weightNumber == 1)
            {
                sprite_index = player_01_stand_spr;
            }
            else if(weightNumber == 2)
            {
                sprite_index = player_02_stand_spr;
            }
            else if(weightNumber == 3)
            {
                sprite_index = player_03_stand_spr;
            }  
            else if(weightNumber == 4)
            {
                sprite_index = player_04_stand_spr;
            }
            else
            {
                sprite_index = player_05_stand_spr;
            }
        }
    }
    // Jumping Animation
    else
    {
        
        if(vsp &lt; 0)
        {
            if(weightNumber == 1)
                sprite_index = player_01_rise_spr;
            else if(weightNumber == 2)
                sprite_index = player_02_rise_spr;
            else if(weightNumber == 3)
                sprite_index = player_03_rise_spr;
            else if(weightNumber == 4)
                sprite_index = player_04_rise_spr;
            else
                sprite_index = player_05_rise_spr;
                
        }
        else
        {
            if(weightNumber == 1)
                sprite_index = player_01_fall_spr;
            else if(weightNumber == 2)
                sprite_index = player_02_fall_spr;
            else if(weightNumber == 3)
                sprite_index = player_03_fall_spr;
            else if(weightNumber == 4)
                sprite_index = player_04_fall_spr;
            else
                sprite_index = player_05_fall_spr;
        }
    }
    
    // Walk Animation
    if((hsp != 0) &amp;&amp; (vsp == 0))
    {
        if(weightNumber == 1)
        {
            sprite_index = player_01_walk_spr;
        }
        else if(weightNumber == 2)
        {
            sprite_index = player_02_walk_spr;
        }
        else if(weightNumber == 3)
        {
            sprite_index = player_03_walk_spr;
        }
        else if(weightNumber == 4)
        {
            sprite_index = player_04_walk_spr;
        }
        else if(weightNumber == 5)
        {
            sprite_index = player_05_walk_spr;
        }
    }
}
//////////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Food_pizza">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 5)
    weightNumber += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_french_fries">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 5)
    weightNumber += 1;  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_cookie">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 5)
    weightNumber += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_cherry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 1)
    weightNumber -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_carrot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 1)
    weightNumber -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_broccoli">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 1)
    weightNumber -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_birthday_cake">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 5)
    weightNumber += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food_apple">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 1)
    weightNumber -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Food">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weightNumber != 5)
    weightNumber += 1;  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpaws
if(paused) paused=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weight Bar

draw_set_color(c_silver);
draw_rectangle(12,12,168,48,false);
draw_set_color(c_teal);
draw_rectangle(15,15,15+30*weightNumber,45,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer

draw_sprite(spr_timer_separate,-1,40,50);

if(!paused)
{
    seconds += 1/room_speed;
}

if(seconds &lt; 60 &amp;&amp; seconds &gt; 59.9)
{
    seconds = 0;
    minutes += 1;
}

//For the Seconds
if(seconds &gt;= 0 &amp;&amp; seconds &lt; 1)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 1 &amp;&amp; seconds &lt; 2)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 2 &amp;&amp; seconds &lt; 3)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 3 &amp;&amp; seconds &lt; 4)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 4 &amp;&amp; seconds &lt; 5) 
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 5 &amp;&amp; seconds &lt; 6)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 6 &amp;&amp; seconds &lt; 7)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 7 &amp;&amp; seconds &lt; 8)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 8 &amp;&amp; seconds &lt; 9) 
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 9 &amp;&amp; seconds &lt; 10)
{
    draw_sprite(spr_timer0,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}
else if(seconds &gt;= 10 &amp;&amp; seconds &lt; 11)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 11 &amp;&amp; seconds &lt; 12)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 12 &amp;&amp; seconds &lt; 13)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 13 &amp;&amp; seconds &lt; 14)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 14 &amp;&amp; seconds &lt; 15)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 15 &amp;&amp; seconds &lt; 16)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 16 &amp;&amp; seconds &lt; 17)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 17 &amp;&amp; seconds &lt; 18)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 18 &amp;&amp; seconds &lt; 19)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 19 &amp;&amp; seconds &lt; 20)
{
    draw_sprite(spr_timer1,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}
else if(seconds &gt;= 20 &amp;&amp; seconds &lt; 21) 
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 21 &amp;&amp; seconds &lt; 22)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 22 &amp;&amp; seconds &lt; 23)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 23 &amp;&amp; seconds &lt; 24)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 24 &amp;&amp; seconds &lt; 25)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 25 &amp;&amp; seconds &lt; 26)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 26 &amp;&amp; seconds &lt; 27)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 27 &amp;&amp; seconds &lt; 28)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 28 &amp;&amp; seconds &lt; 29)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 29 &amp;&amp; seconds &lt; 30)
{
    draw_sprite(spr_timer2,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}
else if(seconds &gt;= 30 &amp;&amp; seconds &lt; 31)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 31 &amp;&amp; seconds &lt; 32)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 32 &amp;&amp; seconds &lt; 33)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 33 &amp;&amp; seconds &lt; 34)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 34 &amp;&amp; seconds &lt; 35)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 35 &amp;&amp; seconds &lt; 36)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 36 &amp;&amp; seconds &lt; 37)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 37 &amp;&amp; seconds &lt; 38)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 38 &amp;&amp; seconds &lt; 39)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 39 &amp;&amp; seconds &lt; 40)
{
    draw_sprite(spr_timer3,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}
else if(seconds &gt;= 40 &amp;&amp; seconds &lt; 41)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 41 &amp;&amp; seconds &lt; 42)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 42 &amp;&amp; seconds &lt; 43)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 43 &amp;&amp; seconds &lt; 44)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 44 &amp;&amp; seconds &lt; 45)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 45 &amp;&amp; seconds &lt; 46)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 46 &amp;&amp; seconds &lt; 47)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 47 &amp;&amp; seconds &lt; 48)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 48 &amp;&amp; seconds &lt; 49)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 49 &amp;&amp; seconds &lt; 50)
{
    draw_sprite(spr_timer4,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}
else if(seconds &gt;= 50 &amp;&amp; seconds &lt; 51)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer0,-1,68,50);
}
else if(seconds &gt;= 51 &amp;&amp; seconds &lt; 52)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer1,-1,68,50);
}
else if(seconds &gt;= 52 &amp;&amp; seconds &lt; 53)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer2,-1,68,50);
}
else if(seconds &gt;= 53 &amp;&amp; seconds &lt; 54)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer3,-1,68,50);
}
else if(seconds &gt;= 54 &amp;&amp; seconds &lt; 55)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer4,-1,68,50);
}
else if(seconds &gt;= 55 &amp;&amp; seconds &lt; 56)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer5,-1,68,50);
}
else if(seconds &gt;= 56 &amp;&amp; seconds &lt; 57)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer6,-1,68,50);
}
else if(seconds &gt;= 57 &amp;&amp; seconds &lt; 58)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer7,-1,68,50);
}
else if(seconds &gt;= 58 &amp;&amp; seconds &lt; 59)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer8,-1,68,50);
}
else if(seconds &gt;= 59 &amp;&amp; seconds &lt; 60)
{
    draw_sprite(spr_timer5,-1,52,50);
    draw_sprite(spr_timer9,-1,68,50);
}

//For the Minutes
if(minutes &gt;= 0 &amp;&amp; minutes &lt; 1)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 1 &amp;&amp; minutes &lt; 2)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 2 &amp;&amp; minutes &lt; 3)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 3 &amp;&amp; minutes &lt; 4)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 4 &amp;&amp; minutes &lt; 5) 
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 5 &amp;&amp; minutes &lt; 6)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 6 &amp;&amp; minutes &lt; 7)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 7 &amp;&amp; minutes &lt; 8)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 8 &amp;&amp; minutes &lt; 9) 
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 9 &amp;&amp; minutes &lt; 10)
{
    draw_sprite(spr_timer0,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
else if(minutes &gt;= 10 &amp;&amp; minutes &lt; 11)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 11 &amp;&amp; minutes &lt; 12)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 12 &amp;&amp; minutes &lt; 13)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 13 &amp;&amp; minutes &lt; 14)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 14 &amp;&amp; minutes &lt; 15)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 15 &amp;&amp; minutes &lt; 16)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 16 &amp;&amp; minutes &lt; 17)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 17 &amp;&amp; minutes &lt; 18)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 18 &amp;&amp; minutes &lt; 19)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 19 &amp;&amp; minutes &lt; 20)
{
    draw_sprite(spr_timer1,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
else if(minutes &gt;= 20 &amp;&amp; minutes &lt; 21) 
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 21 &amp;&amp; minutes &lt; 22)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 22 &amp;&amp; minutes &lt; 23)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 23 &amp;&amp; minutes &lt; 24)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 24 &amp;&amp; minutes &lt; 25)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 25 &amp;&amp; minutes &lt; 26)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 26 &amp;&amp; minutes &lt; 27)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 27 &amp;&amp; minutes &lt; 28)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 28 &amp;&amp; minutes &lt; 29)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 29 &amp;&amp; minutes &lt; 30)
{
    draw_sprite(spr_timer2,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
else if(minutes &gt;= 30 &amp;&amp; minutes &lt; 31)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 31 &amp;&amp; minutes &lt; 32)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 32 &amp;&amp; minutes &lt; 33)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 33 &amp;&amp; minutes &lt; 34)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 34 &amp;&amp; minutes &lt; 35)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 35 &amp;&amp; minutes &lt; 36)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 36 &amp;&amp; minutes &lt; 37)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 37 &amp;&amp; minutes &lt; 38)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 38 &amp;&amp; minutes &lt; 39)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 39 &amp;&amp; minutes &lt; 40)
{
    draw_sprite(spr_timer3,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
else if(minutes &gt;= 40 &amp;&amp; minutes &lt; 41)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 41 &amp;&amp; minutes &lt; 42)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 42 &amp;&amp; minutes &lt; 43)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 43 &amp;&amp; minutes &lt; 44)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 44 &amp;&amp; minutes &lt; 45)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 45 &amp;&amp; minutes &lt; 46)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 46 &amp;&amp; minutes &lt; 47)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 47 &amp;&amp; minutes &lt; 48)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 48 &amp;&amp; minutes &lt; 49)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 49 &amp;&amp; minutes &lt; 50)
{
    draw_sprite(spr_timer4,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
else if(minutes &gt;= 50 &amp;&amp; minutes &lt; 51)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer0,-1,28,50);
}
else if(minutes &gt;= 51 &amp;&amp; minutes &lt; 52)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer1,-1,28,50);
}
else if(minutes &gt;= 52 &amp;&amp; minutes &lt; 53)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer2,-1,28,50);
}
else if(minutes &gt;= 53 &amp;&amp; minutes &lt; 54)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer3,-1,28,50);
}
else if(minutes &gt;= 54 &amp;&amp; minutes &lt; 55)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer4,-1,28,50);
}
else if(minutes &gt;= 55 &amp;&amp; minutes &lt; 56)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer5,-1,28,50);
}
else if(minutes &gt;= 56 &amp;&amp; minutes &lt; 57)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer6,-1,28,50);
}
else if(minutes &gt;= 57 &amp;&amp; minutes &lt; 58)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer7,-1,28,50);
}
else if(minutes &gt;= 58 &amp;&amp; minutes &lt; 59)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer8,-1,28,50);
}
else if(minutes &gt;= 59 &amp;&amp; minutes &lt; 60)
{
    draw_sprite(spr_timer5,-1,12,50);
    draw_sprite(spr_timer9,-1,28,50);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stars
global.total_seconds = seconds + (minutes*60);

//code moved to arrow object, stars to be calculated on level transition
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Paws
if(!paused)
{
    paused=true;
    instance_create(x,y+200,in_game_restart_obj);
    instance_create(x,y+400,in_game_resume_obj);
    instance_create(x,y,in_game_esc_obj);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
